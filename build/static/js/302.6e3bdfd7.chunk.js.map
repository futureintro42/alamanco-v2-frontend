{"version":3,"file":"static/js/302.6e3bdfd7.chunk.js","mappings":"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","sources":["components/molecules/ForgotPasswordForm/index.js","components/templates/ForgotPassword/index.js","utils/schema.js","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ReCAPTCHA from \"react-google-recaptcha\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Link,\r\n  Grid,\r\n  Box,\r\n  Typography,\r\n  Card,\r\n  CardContent,\r\n  Container,\r\n  FormControl,\r\n  InputLabel,\r\n  OutlinedInput,\r\n  FormHelperText,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport { GET_TOKEN_TO_SET_PASSWORD } from \"../../../constants/Query\";\r\nimport { forgotPasswordSchema } from \"../../../utils/schema\";\r\nimport { isValidated } from \"../../../utils/utils\";\r\n\r\nconst ForgotPasswordForm = () => {\r\n  const navigate = useNavigate();\r\n  const [severity, setSeverity] = React.useState(\"error\");\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [captcha, setCaptcha] = React.useState(\"\");\r\n  const [captchaMsg, setCaptchaMsg] = React.useState(\r\n    \"Please click on I'm not a robot.\"\r\n  );\r\n  const [isSubmitted, setSubmitted] = React.useState(false);\r\n  const [getTokenToSetPassword, { loading, error, data }] = useLazyQuery(\r\n    GET_TOKEN_TO_SET_PASSWORD\r\n  );\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    formState: { errors },\r\n  } = useForm({ resolver: yupResolver(forgotPasswordSchema) });\r\n\r\n  const captchaOnChange = (value) => {\r\n    setCaptcha(value || \"\");\r\n    setCaptchaMsg(\"\");\r\n  };\r\n\r\n  const captchaOnExpired = () => {\r\n    setCaptcha(\"\");\r\n    setCaptchaMsg(\"Please click on I'm not a robot\");\r\n  };\r\n\r\n  const onSubmitHandler = (input, e) => {\r\n    e.preventDefault();\r\n    setSubmitted(true);\r\n    if (captcha) {\r\n      getTokenToSetPassword({ variables: { input } });\r\n    } else {\r\n      setCaptchaMsg(\"Please click on I'm not a robot\");\r\n      setSubmitted(false);\r\n    }\r\n  };\r\n  // Response: Form submit handler\r\n  React.useEffect(() => {\r\n    if (!loading && !error && data) {\r\n      const response = data.getTokenToSetPassword;\r\n      setSeverity(response.severity);\r\n      setMessage(response.message);\r\n      isValidated(response.error, setError);\r\n      setSubmitted(false);\r\n      if (!response.error && response.severity.includes(\"success\")) {\r\n        navigate(`/set-password/${response.token}`);\r\n        navigate(0);\r\n      }\r\n    }\r\n  }, [loading, error, data, setError, navigate, setSubmitted]);\r\n\r\n  return (\r\n    <Container maxWidth={false} sx={{ maxWidth: \"600px\" }}>\r\n      <Card sx={{ mt: 10, border: 1, borderColor: \"primary.dark\" }}>\r\n        <CardContent>\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Avatar sx={{ bgcolor: \"secondary.main\" }}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h2\">\r\n              Forgot Password\r\n            </Typography>\r\n            <Box\r\n              component=\"form\"\r\n              onSubmit={handleSubmit(onSubmitHandler)}\r\n              noValidate\r\n              sx={{ mt: 1 }}\r\n              autoComplete=\"off\"\r\n            >\r\n              {severity && message && (\r\n                <Alert\r\n                  variant=\"standard\"\r\n                  severity={severity}\r\n                  sx={{ width: \"100%\", mt: 1 }}\r\n                >\r\n                  {message}\r\n                </Alert>\r\n              )}\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                autoComplete=\"off\"\r\n                margin=\"normal\"\r\n                sx={{ width: \"100%\" }}\r\n              >\r\n                <InputLabel htmlFor=\"email\" aria-label=\"Email\" required>\r\n                  Email\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  type=\"email\"\r\n                  autoComplete=\"off\"\r\n                  label=\"Username\"\r\n                  aria-label=\"email\"\r\n                  sx={{ width: \"100%\" }}\r\n                  aria-describedby=\"email-error\"\r\n                  error={!!errors?.email?.message}\r\n                  {...register(\"email\")}\r\n                />\r\n                {errors?.email && (\r\n                  <FormHelperText error id=\"email-error\">\r\n                    {errors?.email?.message}\r\n                  </FormHelperText>\r\n                )}\r\n              </FormControl>\r\n              <FormControl\r\n                variant=\"outlined\"\r\n                autoComplete=\"off\"\r\n                margin=\"normal\"\r\n                sx={{ width: \"100%\" }}\r\n              >\r\n                <ReCAPTCHA\r\n                  sitekey={`${process.env.REACT_APP_SITE_KEY}`}\r\n                  onChange={(currentValue) => captchaOnChange(currentValue)}\r\n                  onExpired={() => captchaOnExpired()}\r\n                  onErrored={() => captchaOnExpired()}\r\n                />\r\n                {captchaMsg && (\r\n                  <Alert\r\n                    variant=\"standard\"\r\n                    severity=\"error\"\r\n                    sx={{ width: \"100%\", mt: 1 }}\r\n                  >\r\n                    {captchaMsg}\r\n                  </Alert>\r\n                )}\r\n              </FormControl>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2, width: \"100%\" }}\r\n                aria-label=\"forgot password button\"\r\n                disabled={isSubmitted}\r\n              >\r\n                Submit\r\n              </Button>\r\n              <Grid container>\r\n                <Grid item xs={12} sm={6}>\r\n                  <Link\r\n                    href=\"/sign-up\"\r\n                    variant=\"body1\"\r\n                    aria-label=\"signup link\"\r\n                  >\r\n                    Create Account?\r\n                  </Link>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  xs={12}\r\n                  sm={6}\r\n                  sx={{ display: \"flex\", justifyContent: \"flex-end\" }}\r\n                >\r\n                  <Link href=\"/login\" variant=\"body1\" aria-label=\"Login link\">\r\n                    Already have a account\r\n                  </Link>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordForm;\r\n","import { useEffect } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport ForgotPasswordForm from \"../../molecules/ForgotPasswordForm\";\r\n\r\n// ================================|| LOGIN ||================================ //\r\n\r\nconst ForgotPassword = () => {\r\n  const navigate = useNavigate();\r\n  const state = useSelector((state) => state.auth);\r\n  const { isLoggedIn } = state;\r\n  useEffect(() => {\r\n    if (isLoggedIn) {\r\n      navigate(\"/dashboard\");\r\n    }\r\n  }, [isLoggedIn, navigate]);\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={12}>\r\n        <ForgotPasswordForm />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import * as Yup from \"yup\";\r\n\r\nexport const signupSchema = Yup.object().shape({\r\n  first_name: Yup.string().min(3).max(150).required(\"Please enter first name\"),\r\n  last_name: Yup.string().min(3).max(150).required(\"Please enter last name\"),\r\n  email: Yup.string()\r\n    .max(150)\r\n    .email(\"Please indicate a valid email address.\")\r\n    .required(\"Please enter email address.\"),\r\n  password: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\"),\r\n  confirmPassword: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\")\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!\")\r\n    .required(\"Please enter confirm password\"),\r\n});\r\nexport const loginSchema = Yup.object()\r\n  .shape({\r\n    email: Yup.string()\r\n      .email(\"Must be a valid email\")\r\n      .max(150)\r\n      .required(\"Email is required\"),\r\n    password: Yup.string().required(\"Please enter password\"),\r\n  })\r\n  .required();\r\n\r\nexport const forgotPasswordSchema = Yup.object()\r\n  .shape({\r\n    email: Yup.string()\r\n      .email(\"Must be a valid email\")\r\n      .max(150)\r\n      .required(\"Email is required\"),\r\n  })\r\n  .required();\r\nexport const setPasswordSchema = Yup.object().shape({\r\n  password: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\"),\r\n  confirmPassword: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\")\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!\")\r\n    .required(\"Please enter confirm password\"),\r\n});\r\nexport const invoiceSchema = Yup.object().shape({\r\n  sticker_number: Yup.string().max(30).required(\"Strike number is required\"),\r\n  reference_number: Yup.string()\r\n    .max(30)\r\n    .required(\"Reference Number is required\"),\r\n  equipment_type: Yup.string().max(30).required(\"Equipment type is required\"),\r\n  equipment_description: Yup.string()\r\n    .max(200)\r\n    .required(\"Equipment description is required\"),\r\n  make: Yup.string().max(150).required(\"Make is required\"),\r\n  serial_number: Yup.string().max(100).required(\"Serial number is required\"),\r\n  year_of_manufacturing: Yup.string()\r\n    .max(30)\r\n    .required(\"Year of manufacturing is required\"),\r\n  plant_number: Yup.string().max(100).required(\"Plant number is required\"),\r\n  location_of_equipment: Yup.string()\r\n    .max(30)\r\n    .required(\"Location of the equipment is required\"),\r\n  owner_business_name: Yup.string()\r\n    .max(150)\r\n    .required(\"Owner's Business name is required\"),\r\n  owner_business_address: Yup.string()\r\n    .max(200)\r\n    .required(\"Owner's Business address is required\"),\r\n  details: Yup.string().max(200).required(\"details is required\"),\r\n  standard_specification: Yup.string()\r\n    .max(200)\r\n    .required(\"Standard Specification is required\"),\r\n  business_name: Yup.string().max(100).required(\"Business name is required\"),\r\n  business_address: Yup.string()\r\n    .max(200)\r\n    .required(\"Business address is required\"),\r\n  inspection_date: Yup.string().max(30).required(\"Inspection date is required\"),\r\n  inspection_next_date: Yup.string()\r\n    .max(30)\r\n    .required(\"Inspection next date is required\"),\r\n  inspector_name: Yup.string()\r\n    .max(100)\r\n    .required(\"Inspector's name is required\"),\r\n    resultStatus: Yup.string().required(\"resultStatus is required\"),\r\n});\r\n\r\nexport const cardSchema = Yup.object().shape({\r\n  name: Yup.string().max(150).required(\"Card holder name is required\"),\r\n  iqama_number: Yup.string().max(100).required(\"Iqama Number is required\"),\r\n  issue_date: Yup.string().max(30).required(\"Issue date is required\"),\r\n  expiry_date: Yup.string().max(30).required(\"Expiry date is required\"),\r\n  certified_as: Yup.string().max(100).required(\"Certified as is required\"),\r\n  company: Yup.string().max(100).required(\"Company as is required\"),\r\n  examiner: Yup.string().max(100).required(\"Examiner as is required\"),\r\n  profile_pic: Yup.string().nullable().notRequired(),\r\n});\r\n\r\nexport const updateProfileSchema = Yup.object().shape({\r\n  first_name: Yup.string().min(3).max(150).required(\"Please enter first name\"),\r\n  last_name: Yup.string().min(3).max(150).required(\"Please enter last name\"),\r\n  role: Yup.boolean().nullable().notRequired(),\r\n});\r\n\r\nexport const changePasswordSchema = Yup.object().shape({\r\n  oldPassword: Yup.string()\r\n    .required(\"Please Enter your old password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\"),\r\n  password: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\"),\r\n  confirmPassword: Yup.string()\r\n    .required(\"Please Enter your password\")\r\n    .min(6, \"Your password must be longer than 6 characters.\")\r\n    .max(18)\r\n    .matches(/^(?=.{6,})/, \"Must Contain 6 Characters\")\r\n    .matches(\r\n      /^(?=.*[a-z])(?=.*[A-Z])/,\r\n      \"Must Contain One Uppercase, One Lowercase\"\r\n    ) // eslint-disable-next-line\r\n    .matches(/^(?=.*[!@#\\$%\\^&\\*])/, \"Must Contain One Special Case Character\")\r\n    .matches(/^(?=.{6,20}$)\\D*\\d/, \"Must Contain One Number\")\r\n    .oneOf([Yup.ref(\"password\"), null], \"Passwords don't match!\")\r\n    .required(\"Please enter confirm password\"),\r\n});\r\n\r\n\r\n","import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"names":["ForgotPasswordForm","_errors$email","_errors$email2","navigate","useNavigate","severity","setSeverity","React","message","setMessage","captcha","setCaptcha","captchaMsg","setCaptchaMsg","isSubmitted","setSubmitted","getTokenToSetPassword","loading","error","data","useLazyQuery","GET_TOKEN_TO_SET_PASSWORD","register","handleSubmit","setError","formState","errors","useForm","resolver","yupResolver","forgotPasswordSchema","captchaOnExpired","response","isValidated","includes","concat","token","_jsx","Container","maxWidth","sx","children","Card","mt","border","borderColor","CardContent","_jsxs","Box","display","flexDirection","alignItems","Avatar","bgcolor","LockOutlinedIcon","Typography","component","variant","onSubmit","onSubmitHandler","input","e","preventDefault","variables","noValidate","autoComplete","Alert","width","FormControl","margin","InputLabel","htmlFor","required","OutlinedInput","id","name","type","label","email","FormHelperText","ReCAPTCHA","sitekey","process","onChange","currentValue","onExpired","onErrored","Button","mb","disabled","Grid","container","item","xs","sm","Link","href","justifyContent","ForgotPassword","state","useSelector","auth","isLoggedIn","useEffect","spacing","signupSchema","Yup","shape","first_name","min","max","last_name","password","matches","confirmPassword","oneOf","loginSchema","setPasswordSchema","invoiceSchema","sticker_number","reference_number","equipment_type","equipment_description","make","serial_number","year_of_manufacturing","plant_number","location_of_equipment","owner_business_name","owner_business_address","details","standard_specification","business_name","business_address","inspection_date","inspection_next_date","inspector_name","resultStatus","cardSchema","iqama_number","issue_date","expiry_date","certified_as","company","examiner","profile_pic","nullable","notRequired","updateProfileSchema","role","changePasswordSchema","oldPassword","EAGER_METHODS","query","options","execOptionsRef","optionsRef","queryRef","merged","mergeOptions","current","document","_a","internalState","useInternalState","useApolloClient","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdateState","apply","this","arguments","_i","EAGER_METHODS_1","length","execute","executeOptions","fetchPolicy","promise","executeQuery","then","queryResult","catch"],"sourceRoot":""}