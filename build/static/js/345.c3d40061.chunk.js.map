{"version":3,"file":"static/js/345.c3d40061.chunk.js","mappings":"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","sources":["components/templates/Cards/Edit.js","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport Loader from \"../../atoms/Loader\";\r\nimport CardForm from \"../../molecules/CardForm\";\r\nimport { cardSchema } from \"../../../utils/schema\";\r\nimport { UPDATE_CARD } from \"../../../constants/Mutation\";\r\nimport { isValidated, uploadManager } from \"../../../utils/utils\";\r\nimport { FIND_CARD_BY_ID } from \"../../../constants/Query\";\r\n\r\nconst EditCard = () => {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const [loader, setLoader] = React.useState(true);\r\n  const [severity, setSeverity] = React.useState(\"error\");\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [imageSrc, setImageSrc] = React.useState(\"\");\r\n  const [imageValue, setImageValue] = React.useState(\"\");\r\n  const [isSubmitted, setSubmitted] = React.useState(false);\r\n  const [issueDate, setIssueDate] = React.useState(\"\");\r\n  const [expiryDate, setExpiryDate] = React.useState(\"\");\r\n  const [findCardById, { loading: f_loading, error: f_error, data: f_data }] =\r\n    useLazyQuery(FIND_CARD_BY_ID);\r\n  const [updateCard, { loading, error, data }] = useMutation(UPDATE_CARD);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    setValue,\r\n    resetField,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(cardSchema),\r\n  });\r\n\r\n  // Loads default data\r\n  React.useEffect(() => {\r\n    findCardById({ variables: { input: { _id: id } } });\r\n  }, [id, findCardById]);\r\n\r\n  // Response: Loads data\r\n  React.useEffect(() => {\r\n    if (!f_loading && !f_error && f_data) {\r\n      const response = f_data.findCardById;\r\n      if (!response.response) {\r\n        navigate(\"/cards\");\r\n      } else {\r\n        const {\r\n          name,\r\n          iqama_number,\r\n          issue_date,\r\n          expiry_date,\r\n          certified_as,\r\n          profile_pic,\r\n          company,\r\n          examiner,\r\n        } = response.response;\r\n        setValue(\"name\", name);\r\n        setValue(\"iqama_number\", iqama_number);\r\n        setValue(\"certified_as\", certified_as);\r\n        setValue(\"company\", company);\r\n        setValue(\"examiner\", examiner);\r\n        setIssueDate(issue_date);\r\n        setExpiryDate(expiry_date);\r\n\r\n        setImageValue(profile_pic);\r\n        if (profile_pic) {\r\n          const basePath =\r\n            process.env.REACT_APP_ENV === \"local\"\r\n              ? process.env.REACT_APP_GATEWAY_LOCAL\r\n              : process.env.REACT_APP_GATEWAY_LIVE;\r\n          setImageSrc(`${basePath}/images/profile/${profile_pic}`);\r\n        }\r\n        setLoader(false);\r\n      }\r\n    }\r\n  }, [f_loading, f_error, f_data, navigate, setLoader, setValue]);\r\n\r\n  const onSubmitHandler = (data, e) => {\r\n    e.preventDefault();\r\n    const { name, iqama_number, certified_as, company, examiner } =\r\n      data;\r\n    let issue_date = data.issue_date.split(\"/\");\r\n    issue_date = `${issue_date[2]}-${issue_date[1]}-${issue_date[0]}`;\r\n    let expiry_date = data.expiry_date.split(\"/\");\r\n    expiry_date = `${expiry_date[2]}-${expiry_date[1]}-${expiry_date[0]}`;\r\n\r\n    updateCard({\r\n      variables: {\r\n        input: {\r\n          name,\r\n          iqama_number,\r\n          certified_as,\r\n          issue_date,\r\n          expiry_date,\r\n          company,\r\n          examiner,\r\n          _id: id,\r\n          profile_pic: imageValue || \"\",\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  // Response: Submit Handler\r\n  React.useEffect(() => {\r\n    if (!loading && !error && data) {\r\n      const response = data.updateCard;\r\n      setSeverity(response.severity);\r\n      setMessage(response.message);\r\n      isValidated(response.error, setError);\r\n      setSubmitted(false);\r\n      if (!response.error && response.severity.includes(\"success\")) {\r\n        navigate(\"/cards\");\r\n      }\r\n    }\r\n  }, [loading, error, data, setSeverity, setMessage, setError, navigate]);\r\n\r\n  // File upload handler\r\n  const onChangeFileHandler = (event) => {\r\n    const { files } = event.target;\r\n    if (files && files[0]) {\r\n      const { name, size } = files[0];\r\n      const fileSize = size / 1024 / 1024; // in MiB\r\n      const allowedExtensions = /(\\.jpg|\\.jpeg|\\.png|\\.gif)$/i;\r\n      if (!allowedExtensions.exec(name)) {\r\n        setError(\"profile_pic\", {\r\n          type: \"manual\",\r\n          message:\r\n            \"Please you can upload file having extensions .jpeg/.jpg/.png/.gif only.\",\r\n        });\r\n      } else if (fileSize > 5) {\r\n        setError(\"profile_pic\", {\r\n          type: \"manual\",\r\n          message: \"File size exceeds 5 MiB\",\r\n        });\r\n      } else {\r\n        uploadManager(event.target)\r\n          .then((src) => {\r\n            setImageSrc(src);\r\n            setImageValue(src);\r\n            resetField(\"profile_pic\");\r\n          })\r\n          .catch((err) => console.error(err));\r\n      }\r\n    }\r\n  };\r\n\r\n  if (loader) return <Loader />;\r\n\r\n  return (\r\n    <CardForm\r\n      handleSubmit={handleSubmit}\r\n      onSubmitHandler={onSubmitHandler}\r\n      register={register}\r\n      errors={errors}\r\n      severity={severity}\r\n      message={message}\r\n      isSubmitted={isSubmitted}\r\n      title=\"Edit Card\"\r\n      submitBtnTxt=\"Submit\"\r\n      issue_date={issueDate}\r\n      expiry_date={expiryDate}\r\n      onChangeFileHandler={onChangeFileHandler}\r\n      imageSrc={imageSrc}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditCard;\r\n","import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"names":["EditCard","navigate","useNavigate","id","useParams","loader","setLoader","React","severity","setSeverity","message","setMessage","imageSrc","setImageSrc","imageValue","setImageValue","isSubmitted","setSubmitted","issueDate","setIssueDate","expiryDate","setExpiryDate","findCardById","loading","f_loading","error","f_error","data","f_data","useLazyQuery","FIND_CARD_BY_ID","updateCard","useMutation","UPDATE_CARD","register","handleSubmit","setError","setValue","resetField","formState","errors","useForm","resolver","yupResolver","cardSchema","variables","input","_id","response","name","iqama_number","issue_date","expiry_date","certified_as","profile_pic","company","examiner","concat","process","isValidated","includes","_jsx","Loader","CardForm","onSubmitHandler","e","preventDefault","split","title","submitBtnTxt","onChangeFileHandler","event","files","target","size","fileSize","exec","type","uploadManager","then","src","catch","err","console","EAGER_METHODS","query","options","execOptionsRef","optionsRef","queryRef","merged","mergeOptions","current","document","_a","internalState","useInternalState","useApolloClient","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdateState","apply","this","arguments","_i","EAGER_METHODS_1","length","execute","executeOptions","fetchPolicy","promise","executeQuery","queryResult"],"sourceRoot":""}