{"version":3,"file":"static/js/429.2e22a5f5.chunk.js","mappings":"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","sources":["components/templates/Certificate/Edit.js","../node_modules/@apollo/src/react/hooks/useLazyQuery.ts"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\n\r\nimport Loader from \"../../atoms/Loader\";\r\nimport InvoiceForm from \"../../molecules/CertificateForm\";\r\nimport { invoiceSchema } from \"../../../utils/schema\";\r\nimport { UPDATE_INVOICE } from \"../../../constants/Mutation\";\r\nimport { isValidated } from \"../../../utils/utils\";\r\nimport { FIND_INVOICE_BY_ID } from \"../../../constants/Query\";\r\n\r\nconst EditInvoice = () => {\r\n  const navigate = useNavigate();\r\n  const { id } = useParams();\r\n  const [loader, setLoader] = React.useState(true);\r\n  const [severity, setSeverity] = React.useState(\"error\");\r\n  const [message, setMessage] = React.useState(\"\");\r\n  const [isSubmitted, setSubmitted] = React.useState(false);\r\n  const [insDate, setInsDate] = React.useState(\"\");\r\n  const [insNextDate, setInsNextDate] = React.useState(\"\");\r\n  const [resultStatusDefaultValue, setResultStatusDefaultValue] = useState(\"\");\r\n  const [\r\n    findInvoiceByID,\r\n    { loading: f_loading, error: f_error, data: f_data },\r\n  ] = useLazyQuery(FIND_INVOICE_BY_ID);\r\n  const [updateInvoice, { loading, error, data }] = useMutation(UPDATE_INVOICE);\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    setError,\r\n    setValue,\r\n    formState: { errors },\r\n  } = useForm({\r\n    resolver: yupResolver(invoiceSchema),\r\n  });\r\n\r\n  // Loads default data\r\n  React.useEffect(() => {\r\n    findInvoiceByID({ variables: { input: { _id: id } } });\r\n  }, [id, findInvoiceByID]);\r\n\r\n  // Response: Loads data\r\n  React.useEffect(() => {\r\n    if (!f_loading && !f_error && f_data) {\r\n      const response = f_data.findInvoiceByID;\r\n      if (!response.response) {\r\n        navigate(\"/certificate\");\r\n      } else {\r\n        const {\r\n          sticker_number,\r\n          reference_number,\r\n          equipment_type,\r\n          equipment_description,\r\n          make,\r\n          serial_number,\r\n          year_of_manufacturing,\r\n          plant_number,\r\n          location_of_equipment,\r\n          owner_business_name,\r\n          owner_business_address,\r\n          details,\r\n          standard_specification,\r\n          business_name,\r\n          business_address,\r\n          inspection_date,\r\n          inspection_next_date,\r\n          inspector_name,\r\n          resultStatus,\r\n        } = response.response;\r\n        setValue(\"sticker_number\", sticker_number);\r\n        setValue(\"reference_number\", reference_number);\r\n        setValue(\"equipment_type\", equipment_type);\r\n        setValue(\"equipment_description\", equipment_description);\r\n        setValue(\"make\", make);\r\n        setValue(\"serial_number\", serial_number);\r\n        setValue(\"year_of_manufacturing\", year_of_manufacturing);\r\n        setValue(\"plant_number\", plant_number);\r\n        setValue(\"location_of_equipment\", location_of_equipment);\r\n        setValue(\"owner_business_name\", owner_business_name);\r\n        setValue(\"owner_business_address\", owner_business_address);\r\n        setValue(\"details\", details);\r\n        setValue(\"standard_specification\", standard_specification);\r\n        setValue(\"business_name\", business_name);\r\n        setValue(\"business_address\", business_address);\r\n        setValue(\"inspector_name\", inspector_name);\r\n        setValue(\"resultStatus\", resultStatus);\r\n        setResultStatusDefaultValue(resultStatus);\r\n        setInsDate(inspection_date)\r\n        setInsNextDate(inspection_next_date)\r\n        setLoader(false);\r\n      }\r\n    }\r\n  }, [f_loading, f_error, f_data, navigate, setLoader, setValue]);\r\n\r\n  const onSubmitHandler = (data, e) => {\r\n    e.preventDefault();\r\n    let inspection_date = data.inspection_date.split(\"/\");\r\n    inspection_date = `${inspection_date[2]}-${inspection_date[1]}-${inspection_date[0]}`;\r\n    let inspection_next_date = data.inspection_next_date.split(\"/\");\r\n    inspection_next_date = `${inspection_next_date[2]}-${inspection_next_date[1]}-${inspection_next_date[0]}`;\r\n\r\n    updateInvoice({\r\n      variables: {\r\n        input: {\r\n          ...data,\r\n          inspection_date,\r\n          inspection_next_date,\r\n          _id: id,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  // Response: Submit Handler\r\n  React.useEffect(() => {\r\n    if (!loading && !error && data) {\r\n      const response = data.updateInvoice;\r\n      setSeverity(response.severity);\r\n      setMessage(response.message);\r\n      isValidated(response.error, setError);\r\n      setSubmitted(false);\r\n      if (!response.error && response.severity.includes(\"success\")) {\r\n        navigate(\"/certificate\");\r\n      }\r\n    }\r\n  }, [loading, error, data, setSeverity, setMessage, setError, navigate]);\r\n\r\n  if (loader) return <Loader />;\r\n\r\n  return (\r\n    <InvoiceForm\r\n      handleSubmit={handleSubmit}\r\n      onSubmitHandler={onSubmitHandler}\r\n      register={register}\r\n      errors={errors}\r\n      severity={severity}\r\n      message={message}\r\n      isSubmitted={isSubmitted}\r\n      title=\"Edit Certificate\"\r\n      submitBtnTxt=\"Submit\"\r\n      insDate={insDate}\r\n      insNextDate={insNextDate}\r\n      resultStatusDefaultValue={resultStatusDefaultValue}\r\n    />\r\n  );\r\n};\r\n\r\nexport default EditInvoice;\r\n","import type { DocumentNode } from \"graphql\";\nimport type { TypedDocumentNode } from \"@graphql-typed-document-node/core\";\nimport * as React from \"rehackt\";\n\nimport type { OperationVariables } from \"../../core/index.js\";\nimport { mergeOptions } from \"../../utilities/index.js\";\nimport type {\n  LazyQueryHookExecOptions,\n  LazyQueryHookOptions,\n  LazyQueryResultTuple,\n  NoInfer,\n  QueryResult,\n} from \"../types/types.js\";\nimport { useInternalState } from \"./useQuery.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\n\n// The following methods, when called will execute the query, regardless of\n// whether the useLazyQuery execute function was called before.\nconst EAGER_METHODS = [\n  \"refetch\",\n  \"reobserve\",\n  \"fetchMore\",\n  \"updateQuery\",\n  \"startPolling\",\n  \"subscribeToMore\",\n] as const;\n\n/**\n * A hook for imperatively executing queries in an Apollo application, e.g. in response to user interaction.\n *\n * > Refer to the [Queries - Manual execution with useLazyQuery](https://www.apollographql.com/docs/react/data/queries#manual-execution-with-uselazyquery) section for a more in-depth overview of `useLazyQuery`.\n *\n * @example\n * ```jsx\n * import { gql, useLazyQuery } from \"@apollo/client\";\n *\n * const GET_GREETING = gql`\n *   query GetGreeting($language: String!) {\n *     greeting(language: $language) {\n *       message\n *     }\n *   }\n * `;\n *\n * function Hello() {\n *   const [loadGreeting, { called, loading, data }] = useLazyQuery(\n *     GET_GREETING,\n *     { variables: { language: \"english\" } }\n *   );\n *   if (called && loading) return <p>Loading ...</p>\n *   if (!called) {\n *     return <button onClick={() => loadGreeting()}>Load greeting</button>\n *   }\n *   return <h1>Hello {data.greeting.message}!</h1>;\n * }\n * ```\n * @since 3.0.0\n *\n * @param query - A GraphQL query document parsed into an AST by `gql`.\n * @param options - Default options to control how the query is executed.\n * @returns A tuple in the form of `[execute, result]`\n */\nexport function useLazyQuery<\n  TData = any,\n  TVariables extends OperationVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: LazyQueryHookOptions<NoInfer<TData>, NoInfer<TVariables>>\n): LazyQueryResultTuple<TData, TVariables> {\n  const execOptionsRef =\n    React.useRef<Partial<LazyQueryHookExecOptions<TData, TVariables>>>();\n  const optionsRef = React.useRef<LazyQueryHookOptions<TData, TVariables>>();\n  const queryRef = React.useRef<\n    DocumentNode | TypedDocumentNode<TData, TVariables>\n  >();\n  const merged = mergeOptions(options, execOptionsRef.current || {});\n  const document = merged?.query ?? query;\n\n  // Use refs to track options and the used query to ensure the `execute`\n  // function remains referentially stable between renders.\n  optionsRef.current = options;\n  queryRef.current = document;\n\n  const internalState = useInternalState<TData, TVariables>(\n    useApolloClient(options && options.client),\n    document\n  );\n\n  const useQueryResult = internalState.useQuery({\n    ...merged,\n    skip: !execOptionsRef.current,\n  });\n\n  const initialFetchPolicy =\n    useQueryResult.observable.options.initialFetchPolicy ||\n    internalState.getDefaultFetchPolicy();\n\n  const result: QueryResult<TData, TVariables> = Object.assign(useQueryResult, {\n    called: !!execOptionsRef.current,\n  });\n\n  // We use useMemo here to make sure the eager methods have a stable identity.\n  const eagerMethods = React.useMemo(() => {\n    const eagerMethods: Record<string, any> = {};\n    for (const key of EAGER_METHODS) {\n      const method = result[key];\n      eagerMethods[key] = function () {\n        if (!execOptionsRef.current) {\n          execOptionsRef.current = Object.create(null);\n          // Only the first time populating execOptionsRef.current matters here.\n          internalState.forceUpdateState();\n        }\n        // @ts-expect-error this is just too generic to type\n        return method.apply(this, arguments);\n      };\n    }\n\n    return eagerMethods;\n  }, []);\n\n  Object.assign(result, eagerMethods);\n\n  const execute = React.useCallback<LazyQueryResultTuple<TData, TVariables>[0]>(\n    (executeOptions) => {\n      execOptionsRef.current =\n        executeOptions ?\n          {\n            ...executeOptions,\n            fetchPolicy: executeOptions.fetchPolicy || initialFetchPolicy,\n          }\n        : {\n            fetchPolicy: initialFetchPolicy,\n          };\n\n      const options = mergeOptions(optionsRef.current, {\n        query: queryRef.current,\n        ...execOptionsRef.current,\n      });\n\n      const promise = internalState\n        .executeQuery({ ...options, skip: false })\n        .then((queryResult) => Object.assign(queryResult, eagerMethods));\n\n      // Because the return value of `useLazyQuery` is usually floated, we need\n      // to catch the promise to prevent unhandled rejections.\n      promise.catch(() => {});\n\n      return promise;\n    },\n    []\n  );\n\n  return [execute, result];\n}\n"],"names":["EditInvoice","navigate","useNavigate","id","useParams","loader","setLoader","React","severity","setSeverity","message","setMessage","isSubmitted","setSubmitted","insDate","setInsDate","insNextDate","setInsNextDate","resultStatusDefaultValue","setResultStatusDefaultValue","useState","findInvoiceByID","loading","f_loading","error","f_error","data","f_data","useLazyQuery","FIND_INVOICE_BY_ID","updateInvoice","useMutation","UPDATE_INVOICE","register","handleSubmit","setError","setValue","formState","errors","useForm","resolver","yupResolver","invoiceSchema","variables","input","_id","response","sticker_number","reference_number","equipment_type","equipment_description","make","serial_number","year_of_manufacturing","plant_number","location_of_equipment","owner_business_name","owner_business_address","details","standard_specification","business_name","business_address","inspection_date","inspection_next_date","inspector_name","resultStatus","isValidated","includes","_jsx","Loader","InvoiceForm","onSubmitHandler","e","preventDefault","split","concat","title","submitBtnTxt","EAGER_METHODS","query","options","execOptionsRef","optionsRef","queryRef","merged","mergeOptions","current","document","_a","internalState","useInternalState","useApolloClient","client","useQueryResult","useQuery","__assign","skip","initialFetchPolicy","observable","getDefaultFetchPolicy","result","Object","assign","called","eagerMethods","key","method","create","forceUpdateState","apply","this","arguments","_i","EAGER_METHODS_1","length","execute","executeOptions","fetchPolicy","promise","executeQuery","then","queryResult","catch"],"sourceRoot":""}